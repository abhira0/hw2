name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

jobs:
  format:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Format code with autopep8
      run: |
        autopep8 --in-place --recursive .
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Auto format code with autopep8" || echo "No changes to commit"
        git push || echo "No changes to push"

  badges:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v3
      with:
        python-version: "3.12"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt


    - name: Run pylint
      run: |
        mkdir tmp
        pylint src tests > tmp/pylint_output.txt
        echo "PYLINT_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true 

    - name: Run pyright
      run: |
        pyright src/* tests/*
        echo "PYRIGHT_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true 


    - name: Run pytest and capture output
      run: |
        pytest --cov=src --cov-report=term > pytest_output.txt
        echo "PYTEST_EXIT_CODE=$?" >> $GITHUB_ENV
      continue-on-error: true

    - name: Extract number of tests, coverage, and determine result
      run: |
        # Extract the number of tests
        NUM_TESTS=$(grep -oP 'collected \K[0-9]+' pytest_output.txt)

        # Extract the coverage percentage
        COVERAGE=$(grep -oP '(?<=TOTAL\s+)\d+%' pytest_output.txt | tr -d '%')

        # Determine the result of the tests
        if [ ${{ env.PYTEST_EXIT_CODE }} -eq 0 ]; then
          TESTS_STATUS="passing"
          TESTS_COLOR="brightgreen"
        else
          TESTS_STATUS="failing"
          TESTS_COLOR="red"
        fi

        # Determine coverage badge color
        if [ "$COVERAGE" -ge 90 ]; then
          COVERAGE_COLOR="brightgreen"
        elif [ "$COVERAGE" -ge 80 ]; then
          COVERAGE_COLOR="green"
        elif [ "$COVERAGE" -ge 70 ]; then
          COVERAGE_COLOR="yellowgreen"
        elif [ "$COVERAGE" -ge 60 ]; then
          COVERAGE_COLOR="yellow"
        elif [ "$COVERAGE" -ge 50 ]; then
          COVERAGE_COLOR="orange"
        else
          COVERAGE_COLOR="red"
        fi

        # Generate badge URLs
        TESTS_BADGE_URL="https://img.shields.io/badge/tests-${NUM_TESTS}-${TESTS_COLOR}.svg"
        COVERAGE_BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE}%25-${COVERAGE_COLOR}.svg"
        STATUS_BADGE_URL="https://img.shields.io/badge/tests-${TESTS_STATUS}-${TESTS_COLOR}.svg"

        echo "Test Badge URL: $TESTS_BADGE_URL"
        echo "Coverage Badge URL: $COVERAGE_BADGE_URL"
        echo "Status Badge URL: $STATUS_BADGE_URL"

    - name: Update README with pylint badge
      run: |
        SCORE=$(grep -oP '(?<=rated at )[0-9]+\.[0-9]+' tmp/pylint_output.txt)
        if [ "$(echo "$SCORE < 5" | bc)" -eq 1 ]; then
          COLOR="red"
        elif [ "$(echo "$SCORE < 8" | bc)" -eq 1 ]; then
          COLOR="orange"
        elif [ "$(echo "$SCORE < 10" | bc)" -eq 1 ]; then
          COLOR="yellow"
        else
          COLOR="brightgreen"
        fi

        # Generate badge URL
        PYLINT_BADGE_URL="https://img.shields.io/badge/pylint-${SCORE}-${COLOR}.svg"
        echo $PYLINT_BADGE_URL


    - name: Update README with pyright badge
      run: |
        BADGE_COLOR=$( [ $PYRIGHT_EXIT_CODE -eq 0 ] && echo "passing-brightgreen" || echo "failing-red" )
        PYRIGHT_BADGE_URL="https://img.shields.io/badge/pyright-${BADGE_COLOR}.svg"
        echo "Updating README with badge URL: $PYRIGHT_BADGE_URL"
        sed -i '/!\[Pyright Analysis\]/c\![Pyright Analysis]('"$PYRIGHT_BADGE_URL"')' README.md
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        if git diff --quiet; then
            echo "No changes to commit"
        else
            git add README.md
            git commit -m "Update Pyright badge in README"
            git push
        fi
        
    - name: Fail if pyright failed
      run: |
        if [ ${{ env.PYRIGHT_EXIT_CODE }} -ne 0 ]; then
          echo "Pyright failed, marking job as failed."
          exit 1
        fi
        
    - name: Fail if pylint failed
      run: |
        if [ ${{ env.PYLINT_EXIT_CODE }} -ne 0 ]; then
          echo "Pylint failed, marking job as failed."
          exit 1
        fi
